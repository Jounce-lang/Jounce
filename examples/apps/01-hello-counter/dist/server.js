// Auto-generated Jounce Server Bundle
// DO NOT EDIT - Generated by Jounce compiler

const { HttpServer, loadWasm } = require('../dist/server-runtime.js');
const fs = require('fs');
const path = require('path');

// Load WebAssembly module
const wasmPath = path.join(__dirname, 'app.wasm');
const wasmBytes = fs.readFileSync(wasmPath);
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  env: {
    memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),
  }
});

// Server function implementations
// Shared utility functions
module.exports.App = function() {
  return h('div', { class: "container" }, h('h1', "Hello from Jounce! ðŸŽ‰"), h('div', { class: "counter-display" }, h('p', { class: "count" }, "0")), h('div', { class: "button-group" }, h('button', { class: "btn btn-decrement" }, "âˆ’ Decrease"), h('button', { class: "btn btn-reset" }, "Reset"), h('button', { class: "btn btn-increment" }, "+ Increase")), h('div', { class: "info" }, h('p', "This is App 1: A simple demonstration of JSX rendering in Jounce."), h('p', "The counter displays zero and buttons are rendered (interactivity coming in App 2!).")));

}

module.exports.main = function() {
  console.log("App 1: Hello Counter started!");
  console.log("JSX rendering test");
  let app_html = App();
  return console.log("App component created successfully!");

}

// RPC Server Setup
// Auto-generated RPC server handlers
const { HttpServer } = require('../dist/server-runtime.js');

const server = new HttpServer(process.env.PORT || 3000);

// Load WebAssembly module
const fs = require('fs');
const wasmBytes = fs.readFileSync('./app.wasm');
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {});

// Start RPC server
server.start();
console.log(`RPC server listening on port ${server.port}`);

//# sourceMappingURL=server.js.map
