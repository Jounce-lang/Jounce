// Basic Test Examples for Jounce Test Framework
// Functions starting with "test_" are automatically discovered and run

// Helper functions to test
fn add(a: int, b: int) -> int {
    return a + b;
}

fn subtract(a: int, b: int) -> int {
    return a - b;
}

fn multiply(a: int, b: int) -> int {
    return a * b;
}

fn is_even(n: int) -> bool {
    return n % 2 == 0;
}

// Test functions (discovered automatically)
fn test_addition() {
    let result = add(2, 3);
    assert_eq(result, 5, "2 + 3 should equal 5");
}

fn test_subtraction() {
    let result = subtract(10, 3);
    assert_eq(result, 7, "10 - 3 should equal 7");
}

fn test_multiplication() {
    let result = multiply(4, 5);
    assert_eq(result, 20, "4 * 5 should equal 20");
}

fn test_is_even() {
    assert_true(is_even(4), "4 is even");
    assert_false(is_even(5), "5 is not even");
}

fn test_boolean_assertions() {
    let x = 10;
    assert(x > 5, "x should be greater than 5");
    assert(x < 20, "x should be less than 20");
}

fn test_not_equal() {
    let a = 5;
    let b = 10;
    assert_ne(a, b, "a and b should be different");
}

// Async test example
async fn test_async_operation() {
    let result = await async_add(3, 4);
    assert_eq(result, 7, "async_add(3, 4) should equal 7");
}

async fn async_add(a: int, b: int) -> int {
    // Simulates an async operation
    return a + b;
}
