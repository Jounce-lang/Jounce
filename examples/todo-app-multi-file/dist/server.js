// Auto-generated Jounce Server Bundle
// DO NOT EDIT - Generated by Jounce compiler

const { HttpServer, loadWasm } = require('../dist/server-runtime.js');
const fs = require('fs');
const path = require('path');

// Struct definitions
function Todo(id, title, completed) {
  this.id = id;
  this.title = title;
  this.completed = completed;
}

// Enum definitions
// Enum: Filter
function Filter() {}
const All = (() => { const v = { variant: "All" }; v.__proto__ = Filter.prototype; return v; })();
Filter.All = All;
const Active = (() => { const v = { variant: "Active" }; v.__proto__ = Filter.prototype; return v; })();
Filter.Active = Active;
const Completed = (() => { const v = { variant: "Completed" }; v.__proto__ = Filter.prototype; return v; })();
Filter.Completed = Completed;

// Load WebAssembly module
const wasmPath = path.join(__dirname, 'app.wasm');
const wasmBytes = fs.readFileSync(wasmPath);
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  env: {
    memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),
  }
});

// Server function implementations
// Shared utility functions
module.exports.create_todo = function(id, title) {
  return new Todo(id, title, false);

}

module.exports.generate_id = function() {
  return 42;

}

module.exports.format_count = function(count) {
  if ((count == 1)) {
  return "1 item";

  }
  return (count.to_string() + " items");

}

module.exports.is_valid_id = function(id) {
  return (id > 0);

}

module.exports.validate_title = function(title) {
  return (title.length() > 0);

}

module.exports.double = function(n) {
  return (n * 2);

}

module.exports.format_todo = function(todo) {
  let status = (() => { if (todo.completed) { return "[x]"; } else { return "[ ]"; } })();
  return ((status + " ") + todo.title);

}

module.exports.mark_completed = function(todo) {
  return new Todo(todo.id, todo.title, true);

}

module.exports.get_sample_todo = function() {
  return create_todo(1, "Sample task");

}

module.exports.main = function() {
  console.log("=== Todo App (Multi-file Example) ===");
  console.log("");
  console.log("Testing utilities...");
  let count_text = format_count(3);
  console.log(("Count: " + count_text));
  let valid = validate_title("Learn Jounce");
  console.log(("Title validation: " + valid.to_string()));
  let id = generate_id();
  console.log(("Generated ID: " + id.to_string()));
  let doubled = double(21);
  console.log(("Double 21: " + doubled.to_string()));
  console.log("");
  console.log("Creating todos...");
  let todo1 = create_todo(1, "Learn Jounce");
  let todo2 = create_todo(2, "Build an app");
  console.log("âœ“ Created todos");
  console.log("");
  console.log("Testing storage...");
  let sample = get_sample_todo();
  console.log(("Sample: " + format_todo(sample)));
  let completed_todo = mark_completed(todo1);
  console.log(("Completed: " + format_todo(completed_todo)));
  console.log("");
  console.log("=== All imports working! ===");
  console.log("Files: types.jnc, utils.jnc, storage.jnc");
  return console.log("Imports: 3 modules successfully loaded");

}

// RPC Server Setup
// Auto-generated RPC server handlers
const { HttpServer } = require('../dist/server-runtime.js');

const server = new HttpServer(process.env.PORT || 3000);

// Load WebAssembly module
const fs = require('fs');
const wasmBytes = fs.readFileSync('./app.wasm');
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {});

// Start RPC server
server.start();
console.log(`RPC server listening on port ${server.port}`);

//# sourceMappingURL=server.js.map
