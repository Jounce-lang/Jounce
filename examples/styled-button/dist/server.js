// Auto-generated Jounce Server Bundle
// DO NOT EDIT - Generated by Jounce compiler

const { HttpServer, loadWasm } = require('../dist/server-runtime.js');
const fs = require('fs');
const path = require('path');

// Load WebAssembly module
const wasmPath = path.join(__dirname, 'app.wasm');
const wasmBytes = fs.readFileSync(wasmPath);
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  env: {
    memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),
  }
});

// Server function implementations
// Shared utility functions
module.exports.main = function() {
  console.log("Styled Todo App");
  console.log("===============");
  console.log("");
  console.log("This example demonstrates:");
  console.log("✓ Complete theme system with 12 color properties");
  console.log("✓ Responsive layout with flexbox");
  console.log("✓ Interactive states (:hover, :focus, :disabled)");
  console.log("✓ 13 styled components (AppContainer, TodoCard, Header, etc.)");
  console.log("✓ Nested selectors for hover/focus/disabled states");
  console.log("✓ Theme references with CSS custom properties");
  console.log("✓ Scoped CSS with unique class names");
  console.log("✓ Smooth transitions and animations");
  console.log("");
  console.log("Style Components:");
  console.log("- AppContainer: Full-page layout");
  console.log("- TodoCard: Main card with shadow");
  console.log("- Header: Gradient header");
  console.log("- InputContainer, TodoInput, AddButton");
  console.log("- TodoList, TodoItem, Checkbox, TodoText");
  console.log("- DeleteButton, Stats, ClearButton");
  console.log("");
  return console.log("Check dist/styles.css for ~250 lines of generated CSS!");

}

// RPC Server Setup
// Auto-generated RPC server handlers
const { HttpServer } = require('../dist/server-runtime.js');

const server = new HttpServer(process.env.PORT || 3000);

// Load WebAssembly module
const fs = require('fs');
const wasmBytes = fs.readFileSync('./app.wasm');
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {});

// Start RPC server
server.start();
console.log(`RPC server listening on port ${server.port}`);

//# sourceMappingURL=server.js.map
