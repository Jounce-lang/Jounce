// Styled Button Component Example
// Demonstrates basic style blocks with nested selectors

theme ButtonTheme {
    primary: #3b82f6;
    primaryHover: #2563eb;
    secondary: #8b5cf6;
    secondaryHover: #7c3aed;
    danger: #ef4444;
    dangerHover: #dc2626;
    text: #ffffff;
    disabled: #9ca3af;
}

style Button {
    background: theme.ButtonTheme.primary;
    color: theme.ButtonTheme.text;
    padding: 12px 24px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: all 0.2s ease;

    &:hover {
        background: theme.ButtonTheme.primaryHover;
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    &:disabled {
        background: theme.ButtonTheme.disabled;
        cursor: not-allowed;
        opacity: 0.6;
        transform: translateY(0);
    }

    &.secondary {
        background: theme.ButtonTheme.secondary;
    }

    &.danger {
        background: theme.ButtonTheme.danger;
    }

    &.small {
        padding: 8px 16px;
        font-size: 14px;
    }

    &.large {
        padding: 16px 32px;
        font-size: 18px;
    }
}

fn main() {
    println!("Styled Button Component Example");
    println!("================================");
    println!("");
    println!("This example demonstrates:");
    println!("- Theme definitions with CSS custom properties");
    println!("- Style blocks with scoped class names");
    println!("- Nested selectors (&:hover, &:disabled)");
    println!("- Class modifiers (&.secondary, &.danger)");
    println!("- Size variants (&.small, &.large)");
    println!("");
    println!("Open the generated dist/styles.css to see the output!");
}
