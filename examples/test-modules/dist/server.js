// Auto-generated Jounce Server Bundle
// DO NOT EDIT - Generated by Jounce compiler

const { HttpServer, loadWasm } = require('../dist/server-runtime.js');
const fs = require('fs');
const path = require('path');

// Load WebAssembly module
const wasmPath = path.join(__dirname, 'app.wasm');
const wasmBytes = fs.readFileSync(wasmPath);
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  env: {
    memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),
  }
});

// Server function implementations
// Shared utility functions
module.exports.multiply = function(a, b) {
  return (a * b);

}

module.exports.is_even = function(n) {
  return ((n % 2) == 0);

}

module.exports.add = function(a, b) {
  return (a + b);

}

module.exports.main = function() {
  console.log("=== Testing Local Imports ===");
  let sum = add(10, 5);
  console.log(("10 + 5 = " + sum.to_string()));
  let product = multiply(7, 6);
  console.log(("7 * 6 = " + product.to_string()));
  let even_check = is_even(42);
  console.log(("Is 42 even? " + even_check.to_string()));
  let odd_check = is_even(13);
  console.log(("Is 13 even? " + odd_check.to_string()));
  return console.log("=== All imports working! ===");

}

// RPC Server Setup
// Auto-generated RPC server handlers
const { HttpServer } = require('../dist/server-runtime.js');

const server = new HttpServer(process.env.PORT || 3000);

// Load WebAssembly module
const fs = require('fs');
const wasmBytes = fs.readFileSync('./app.wasm');
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {});

// Start RPC server
server.start();
console.log(`RPC server listening on port ${server.port}`);

//# sourceMappingURL=server.js.map
