// Test multiple type parameters
fn pair<T, U>(first: T, second: U) -> String {
    println!("Pair: {} and {}", first, second);
    "done"
}

// Test generic with arrays
fn first<T>(items: [T]) -> T {
    items[0]
}

// Test nested generics
fn wrap<T>(value: T) -> Option<T> {
    Some(value)
}

fn main() {
    // Multiple type parameters
    let result1 = pair(42, "hello");
    let result2 = pair("world", 3.14);

    // Generic with arrays
    let numbers = [1, 2, 3];
    let x = first(numbers);
    println!("First: {}", x);

    // Nested generics
    let wrapped = wrap(100);
    match wrapped {
        Some(v) => println!("Wrapped: {}", v),
        None => println!("Empty"),
    }
}
