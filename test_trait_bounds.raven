// Test trait bounds parsing

trait Display {
    fn to_string(&self) -> String;
}

trait Comparable {
    fn compare(&self, other: &Self) -> i32;
}

struct Point {
    x: i32,
    y: i32,
}

impl Display for Point {
    fn to_string(&self) -> String {
        "Point"
    }
}

// Function with single trait bound
fn print_value<T: Display>(value: T) {
    println!("{}", value.to_string());
}

// Function with multiple trait bounds
fn compare_and_print<T: Display + Comparable>(a: T, b: T) {
    println!("{}", a.to_string());
    let result = a.compare(&b);
    println!("Comparison: {}", result);
}

fn main() {
    let p = Point { x: 10, y: 20 };
    print_value(p);
}
