// Auto-generated Jounce Server Bundle
// DO NOT EDIT - Generated by Jounce compiler

const { HttpServer, loadWasm } = require('./server-runtime.js');
const fs = require('fs');
const path = require('path');

// Load WebAssembly module
const wasmPath = path.join(__dirname, 'app.wasm');
const wasmBytes = fs.readFileSync(wasmPath);
const wasmModule = new WebAssembly.Module(wasmBytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  env: {
    memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),
  }
});

// Server function implementations
// Shared utility functions
module.exports.App = function() {
  return h('div', { class: "container" }, h('header', { class: "header" }, h('h1', "Markdown Previewer üìù"), h('p', { class: "subtitle" }, "Write markdown on the left, see HTML preview on the right")), h('div', { class: "editor-container" }, h('div', { class: "editor-pane" }, h('div', { class: "pane-header" }, h('h2', "Markdown Input"), h('span', { class: "badge" }, "Editor")), h('textarea', { class: "markdown-input", placeholder: "# Welcome to Markdown!\n\n## Features\n- **Bold text**\n- *Italic text*\n- `Code snippets`\n- [Links](https://example.com)\n\n```javascript\nconst code = 'blocks';\n```\n\n> Blockquotes are cool too!\n\n---\n\nTry typing some markdown!" }, "# Hello, Jounce! üöÄ

## What is Markdown?

Markdown is a **lightweight markup language** for creating formatted text.

### Features

- Easy to write
- Easy to read
- Converts to HTML

### Code Example

```jounce
let greeting = "Hello, World!";
console.log(greeting);
```

### Formatting

You can use:
- **Bold text** with `**text**`
- *Italic text* with `*text*`
- `Inline code` with backticks

### Links

Visit [Jounce](https://github.com/jounce) for more!

---

> "Markdown is a simple way to format text that looks great everywhere."

### Task List

- [x] Create markdown parser
- [x] Add syntax highlighting
- [ ] Build live preview
- [ ] Deploy to production

**Try editing the markdown!** The preview updates as you type.")), h('div', { class: "preview-pane" }, h('div', { class: "pane-header" }, h('h2', "HTML Preview"), h('span', { class: "badge" }, "Live")), h('div', { class: "markdown-preview" }, h('h1', "Hello, Jounce! üöÄ"), h('h2', "What is Markdown?"), h('p', "Markdown is a", h('strong', "lightweight markup language"), "for", "creating formatted text."), h('h3', "Features"), h('ul', h('li', "Easy to write"), h('li', "Easy to read"), h('li', "Converts to HTML")), h('h3', "Code Example"), h('pre', h('code', { class: "language-jounce" }, "let greeting = "Hello, World!";
console.log(greeting);")), h('h3', "Formatting"), h('p', "You can use:"), h('ul', h('li', h('strong', "Bold text"), "with", h('code', "**text**")), h('li', h('em', "Italic text"), "with", h('code', "*text*")), h('li', h('code', "Inline code"), "with", "backticks")), h('h3', "Links"), h('p', "Visit", h('a', { href: "https://github.com/jounce" }, "Jounce"), "for", "more!"), h('hr', null), h('blockquote', h('p', ""Markdown is a simple way to format text that looks great everywhere."")), h('h3', "Task List"), h('ul', h('li', "‚úì Create markdown parser"), h('li', "‚úì Add syntax highlighting"), h('li', "‚òê Build live preview"), h('li', "‚òê Deploy to production")), h('p', h('strong', "Try editing the markdown!"), "The", "preview updates as you type.")))), h('footer', { class: "info" }, h('p', h('strong', "App 3: Markdown Previewer")), h('p', "This demo shows static markdown rendering. Interactive preview with signal and computed coming soon!"), h('p', "Packages: jounce-markdown for parsing and jounce-sanitizer for XSS protection")));

}

module.exports.main = function() {
  console.log("App 3: Markdown Previewer started!");
  console.log("Features: Split-pane editor, markdown syntax reference");
  console.log("Coming soon: Package integration for live markdown parsing!");
  let app_html = App();
  return console.log("Markdown previewer component created successfully!");

}

// RPC Server Setup
// Auto-generated RPC server handlers
const server = new HttpServer(process.env.PORT || 3000);

// Start RPC server
server.start();
console.log(`RPC server listening on port ${server.port}`);

//# sourceMappingURL=server.js.map
