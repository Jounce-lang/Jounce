{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Jounce",
  "scopeName": "source.jnc",
  "patterns": [
    { "include": "#comments" },
    { "include": "#annotations" },
    { "include": "#jsx" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#functions" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jnc",
          "match": "//.*$"
        },
        {
          "name": "comment.block.jnc",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "meta.annotation.jnc",
          "match": "@(server|client)\\b",
          "captures": {
            "0": { "name": "storage.type.annotation.jnc" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.jnc",
          "match": "\\b(if|else|match|for|while|loop|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.jnc",
          "match": "\\b(fn|let|const|mut|struct|enum|impl|trait|type|pub|use|mod|as|in)\\b"
        },
        {
          "name": "keyword.control.async.jnc",
          "match": "\\b(async|await)\\b"
        },
        {
          "name": "keyword.operator.jnc",
          "match": "\\b(move|ref)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.jnc",
          "match": "\\b(i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|f32|f64|bool|char|str)\\b"
        },
        {
          "name": "storage.type.jnc",
          "match": "\\b(String|Vec|Option|Result|HashMap|HashSet|Box|Rc|Arc|Cell|RefCell)\\b"
        },
        {
          "name": "storage.type.self.jnc",
          "match": "\\b(Self|self)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.jnc",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.jnc",
          "match": "\\b(None|Some|Ok|Err|Signal)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.jnc",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.jnc",
              "match": "\\\\(n|r|t|\\\\|0|\"|')"
            },
            {
              "name": "constant.character.escape.unicode.jnc",
              "match": "\\\\u\\{[0-9a-fA-F]+\\}"
            }
          ]
        },
        {
          "name": "string.quoted.single.jnc",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.jnc",
              "match": "\\\\(n|r|t|\\\\|0|\"|')"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.jnc",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?(f32|f64)?\\b"
        },
        {
          "name": "constant.numeric.integer.jnc",
          "match": "\\b\\d+(_\\d+)*(i8|i16|i32|i64|i128|u8|u16|u32|u64|u128)?\\b"
        },
        {
          "name": "constant.numeric.hex.jnc",
          "match": "\\b0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*\\b"
        },
        {
          "name": "constant.numeric.binary.jnc",
          "match": "\\b0b[01]+(_[01]+)*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.jnc",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.logical.jnc",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.jnc",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.assignment.jnc",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.namespace.jnc",
          "match": "::"
        },
        {
          "name": "keyword.operator.arrow.jnc",
          "match": "(->|=>)"
        },
        {
          "name": "keyword.operator.range.jnc",
          "match": "(\\.\\.|\\.\\.=)"
        },
        {
          "name": "keyword.operator.spread.jnc",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.turbofish.jnc",
          "match": "::<"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.jnc",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "entity.name.function.macro.jnc",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)!"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.constant.jnc",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.jnc",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "jsx": {
      "patterns": [
        {
          "name": "meta.tag.jsx.jnc",
          "begin": "(<)([A-Z][a-zA-Z0-9]*|[a-z][a-zA-Z0-9\\-]*)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.tag.begin.jsx.jnc" },
            "2": { "name": "entity.name.tag.jsx.jnc" }
          },
          "end": "(/>)|(>)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.tag.self-close.jsx.jnc" },
            "2": { "name": "punctuation.definition.tag.end.jsx.jnc" }
          },
          "patterns": [
            { "include": "#jsx-attributes" },
            { "include": "#jsx-expression" }
          ]
        },
        {
          "name": "meta.tag.jsx.close.jnc",
          "begin": "(</)([A-Z][a-zA-Z0-9]*|[a-z][a-zA-Z0-9\\-]*)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.tag.begin.jsx.jnc" },
            "2": { "name": "entity.name.tag.jsx.jnc" }
          },
          "end": "(>)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.tag.end.jsx.jnc" }
          }
        },
        { "include": "#jsx-expression" }
      ]
    },
    "jsx-attributes": {
      "patterns": [
        {
          "name": "entity.other.attribute-name.jsx.jnc",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_\\-]*(?==)"
        },
        {
          "name": "entity.other.attribute-name.jsx.jnc",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_\\-]*\\b"
        }
      ]
    },
    "jsx-expression": {
      "patterns": [
        {
          "name": "meta.embedded.expression.jsx.jnc",
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": { "name": "punctuation.section.embedded.begin.jsx.jnc" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.section.embedded.end.jsx.jnc" }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    }
  }
}
