// Tests for session management in jounce-auth
use jounce_auth::{create_session, get_session, update_session, destroy_session};

#[test]
fn test_create_session() {
    let session = create_session("user123", 3600);

    assert_eq!(session.user_id, "user123", "User ID should match");
    assert!(!session.id.is_empty(), "Session ID should not be empty");
    assert_eq!(session.data.len(), 0, "Session data should be empty initially");
}

#[test]
fn test_create_session_with_ttl() {
    let session = create_session("user456", 7200);

    assert_eq!(session.user_id, "user456", "User ID should match");
    assert!(session.expires_at > session.created_at, "Expiration should be after creation");
}

#[test]
fn test_get_session() {
    let session = create_session("user789", 3600);
    let retrieved = get_session(session.id);

    assert!(retrieved.is_some(), "Should retrieve session");
    assert_eq!(retrieved.unwrap().user_id, "user789", "User ID should match");
}

#[test]
fn test_get_nonexistent_session() {
    let result = get_session("nonexistent_session_id");

    assert!(result.is_none(), "Should return None for nonexistent session");
}

#[test]
fn test_update_session() {
    let session = create_session("user123", 3600);

    let updated = update_session(session.id, "theme", "dark");

    assert!(updated, "Should update session successfully");
}

#[test]
fn test_update_session_multiple_data() {
    let session = create_session("user123", 3600);

    update_session(session.id.clone(), "lang", "en");
    update_session(session.id.clone(), "theme", "dark");
    update_session(session.id.clone(), "timezone", "UTC");

    let retrieved = get_session(session.id);
    assert!(retrieved.is_some(), "Should retrieve session");
}

#[test]
fn test_update_nonexistent_session() {
    let updated = update_session("nonexistent", "key", "value");

    assert!(!updated, "Should return false for nonexistent session");
}

#[test]
fn test_destroy_session() {
    let session = create_session("user123", 3600);

    let destroyed = destroy_session(session.id.clone());

    assert!(destroyed, "Should destroy session successfully");

    let retrieved = get_session(session.id);
    assert!(retrieved.is_none(), "Should not find destroyed session");
}

#[test]
fn test_destroy_nonexistent_session() {
    let destroyed = destroy_session("nonexistent");

    assert!(!destroyed, "Should return false for nonexistent session");
}

#[test]
fn test_session_id_uniqueness() {
    let session1 = create_session("user1", 3600);
    let session2 = create_session("user1", 3600);

    assert!(session1.id != session2.id, "Session IDs should be unique");
}

#[test]
fn test_session_created_at() {
    let session = create_session("user123", 3600);

    assert!(session.created_at > 0, "Created at should be positive timestamp");
}

#[test]
fn test_session_expires_at() {
    let ttl = 3600;
    let session = create_session("user123", ttl);

    let expected_expiration = session.created_at + ttl;
    assert_eq!(session.expires_at, expected_expiration, "Expiration should be created_at + TTL");
}

#[test]
fn test_multiple_sessions_same_user() {
    let session1 = create_session("user123", 3600);
    let session2 = create_session("user123", 7200);

    let retrieved1 = get_session(session1.id);
    let retrieved2 = get_session(session2.id);

    assert!(retrieved1.is_some(), "Should retrieve first session");
    assert!(retrieved2.is_some(), "Should retrieve second session");
}

#[test]
fn test_session_lifecycle() {
    // Create
    let session = create_session("user123", 3600);
    assert!(!session.id.is_empty(), "Session should be created");

    // Update
    let updated = update_session(session.id.clone(), "key", "value");
    assert!(updated, "Session should be updated");

    // Get
    let retrieved = get_session(session.id.clone());
    assert!(retrieved.is_some(), "Session should be retrievable");

    // Destroy
    let destroyed = destroy_session(session.id.clone());
    assert!(destroyed, "Session should be destroyed");

    // Verify destroyed
    let not_found = get_session(session.id);
    assert!(not_found.is_none(), "Session should not be found after destruction");
}
