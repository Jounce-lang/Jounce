// Comprehensive Trait System Example
// Demonstrates all major trait features in RavensOne

// ============================================
// Basic Trait Definitions
// ============================================

trait Display {
    fn to_string(self: Self) -> String;
}

trait Clone {
    fn clone(self: Self) -> Self;
}

trait Comparable {
    fn compare(self: Self, other: Self) -> i32;
}

trait Builder {
    fn build(self: Self) -> Self;
}

// ============================================
// Struct Definitions
// ============================================

struct Point {
    x: i32,
    y: i32,
}

struct Person {
    name: String,
    age: i32,
}

struct Rectangle {
    width: i32,
    height: i32,
}

struct Container<T> {
    value: T,
}

// ============================================
// Inherent Implementations
// ============================================

impl Point {
    fn distance_from_origin(self: Point) -> i32 {
        // Simplified distance calculation
        self.x + self.y
    }
}

// ============================================
// Trait Implementations
// ============================================

impl Display for Point {
    fn to_string(self: Point) -> String {
        "Point(x, y)"
    }
}

impl Display for Person {
    fn to_string(self: Person) -> String {
        "Person"
    }
}

impl Display for Rectangle {
    fn to_string(self: Rectangle) -> String {
        "Rectangle"
    }
}

impl Clone for Point {
    fn clone(self: Point) -> Point {
        Point { x: self.x, y: self.y }
    }
}

impl Clone for Person {
    fn clone(self: Person) -> Person {
        Person { name: self.name, age: self.age }
    }
}

impl Comparable for Person {
    fn compare(self: Person, other: Person) -> i32 {
        self.age - other.age
    }
}

impl Builder for Rectangle {
    fn build(self: Rectangle) -> Rectangle {
        self
    }
}

impl Display for Container<i32> {
    fn to_string(self: Container<i32>) -> String {
        "Container"
    }
}

// ============================================
// Generic Functions with Trait Bounds
// ============================================

// Single trait bound
fn print_value<T: Display>(value: T) {
    let s = value.to_string();
    println!("{}", s);
}

// Multiple trait bounds
fn clone_and_display<T: Display + Clone>(value: T) -> T {
    let cloned = value.clone();
    let s = cloned.to_string();
    println!("{}", s);
    cloned
}

// Generic function using trait methods
fn compare_values<T: Comparable>(a: T, b: T) -> i32 {
    a.compare(b)
}

// Generic function with builder pattern
fn build_value<T: Builder>(value: T) -> T {
    value.build()
}

// ============================================
// Helper Functions
// ============================================

fn test_basic_traits() {
    println!("=== Basic Trait Usage ===");

    let point = Point { x: 10, y: 20 };
    let person = Person { name: "Alice", age: 30 };

    print_value(point);
    print_value(person);
}

fn test_multiple_bounds() {
    println!("=== Multiple Trait Bounds ===");

    let p1 = Point { x: 5, y: 10 };
    let cloned_point = clone_and_display(p1);

    let person = Person { name: "Bob", age: 25 };
    let cloned_person = clone_and_display(person);
}

fn test_comparable() {
    println!("=== Comparable Trait ===");

    let alice = Person { name: "Alice", age: 30 };
    let bob = Person { name: "Bob", age: 25 };

    let result = compare_values(alice, bob);
    println!("Comparison result: {}", result);
}

fn test_builder() {
    println!("=== Builder Trait ===");

    let rect = Rectangle { width: 10, height: 20 };
    let built = build_value(rect);
}

fn test_generic_structs() {
    println!("=== Generic Structs with Traits ===");

    let container = Container { value: 42 };
    print_value(container);
}

fn test_method_calls() {
    println!("=== Direct Method Calls ===");

    let point = Point { x: 3, y: 4 };
    let s = point.to_string();
    println!("Point: {}", s);

    let distance = point.distance_from_origin();
    println!("Distance: {}", distance);

    let person = Person { name: "Charlie", age: 20 };
    let person_str = person.to_string();
    println!("Person: {}", person_str);
}

// ============================================
// Main Function
// ============================================

fn main() {
    println!("RavensOne Trait System - Comprehensive Example");
    println!("=============================================");

    test_basic_traits();
    test_multiple_bounds();
    test_comparable();
    test_builder();
    test_generic_structs();
    test_method_calls();

    println!("=============================================");
    println!("All trait examples completed successfully!");
}
